package solver;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * Equation Input Box
 * @author Michael P.F. FUNG
 * @since 22 Sept 2017
 */
public class EquationInputBox extends JFrame implements ActionListener {
    // GUI components for user interactions
    protected JTextField ax2, bx, c;
    protected JTextField px, qy, r;
    protected JButton solveButton;
    protected JLabel message;
    
    /**
     * Constructor
     */
    public EquationInputBox()
    {
        initComponents();
    }
    
    /**
     * Initial GUI components.
     */
    public final void initComponents()
    {
        setTitle("Equation Solver - InputBox");
        setLayout(new GridLayout(7, 1));  // 7 rows of components
        
        // window geometry
        setSize(400, 300);
        setLocation(400, 200);

        // row 1
        add(new JLabel("<html>Equation 1: &nbsp;&nbsp;&nbsp; A &middot; x<sup>2</sup> + B &middot; x = C</html>"));
        
        // row 2
        JPanel eqn1 = new JPanel();
        eqn1.add(ax2 = new JTextField());  eqn1.add(new JLabel("<html>x<sup>2</sup> + </html>"));
        eqn1.add(bx = new JTextField());   eqn1.add(new JLabel("x = "));
        eqn1.add(c = new JTextField());
        ax2.setColumns(5);
        bx.setColumns(5);
        c.setColumns(5);
        add(eqn1);
        
        // row 3
        add(new JLabel("<html>Equation 2: &nbsp;&nbsp;&nbsp; P &middot; x + Q &middot; y = R</html>"));

        // row 4
        JPanel eqn2 = new JPanel();
        eqn2.add(px = new JTextField());   eqn2.add(new JLabel("x + "));
        eqn2.add(qy = new JTextField());   eqn2.add(new JLabel("y = "));
        eqn2.add(r = new JTextField());
        px.setColumns(5);
        qy.setColumns(5);
        r.setColumns(5);
        add(eqn2);
        
        // row 5
        add(new JLabel("<html>Target solution: minimize <font color=red>cost</font> = x &middot; y</html>"));

        // row 6
        add(solveButton = new JButton("Solve!"));
        solveButton.addActionListener(this);

        // row 7
        add(message = new JLabel());
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    /**
     * Callback method for processing user inputs on clicking Solve! button.
     * This method will be invoked by the Java GUI.
     * @param event refers to an object generated by the Java GUI system
     */
    @Override
    public void actionPerformed(ActionEvent event) {
        if (validateInputs())
            Solver.calculate();
        // do nothing if inputs are invalid
    }
    
    /**
     * Check if all user inputs are proper double values.
     * @return true if all user inputs are valid; false otherwise.
     */
    public boolean validateInputs()
    {
        try {
            double A = getA();
            double B = getB();
            double C = getC();
            double P = getP();
            double Q = getQ();
            double R = getR();
        }
        catch (Exception e) {
            message.setText("Wrong input!");
            return false;
        }
        return true;  // all inputs are proper double values
    }
    
    /**
     * Display solution message, to be invoked by Solver.
     * @param theMinimalCostFound is the solution
     */
    public void displaySolution(double theMinimalCostFound) {
        message.setText("Solution found with minimal cost = " + theMinimalCostFound);
    }
    
    /**
     * Display no solution message, to be invoked by Solver.
     */
    public void displayNoSolution() {
        message.setText("No solution!");
    }
    
    /**
     * Display many solution message, to be invoked by Solver.
     */
    public void displayManySolutions() {
        message.setText("Many solutions so that cost can be infinitely low!");
    }
    
    public double getA() {
        return Double.parseDouble(ax2.getText());
    }
    public double getB() {
        return Double.parseDouble(bx.getText());
    }
    public double getC() {
        return Double.parseDouble(c.getText());
    }
    public double getP() {
        return Double.parseDouble(px.getText());
    }
    public double getQ() {
        return Double.parseDouble(qy.getText());
    }
    public double getR() {
        return Double.parseDouble(r.getText());
    }
}
